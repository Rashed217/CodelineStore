@page "/SellerInfo/{sellerId:int}"
@using CodelineStore.DTOs.ProductDTO
@using CodelineStore.DTOs.SellerDTOs
@inject ISellerService SellerService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    @if (IsLoading)
    {
        <MudText Typo="Typo.h6">Loading seller information...</MudText>
    }
    else if (HasError)
    {
        <MudText Typo="Typo.h6" Color="Color.Error">Error loading seller information.</MudText>
    }
    else if (Seller != null)
    {
        <MudPaper Class="mb-6" Style="width: 100%; height: 250px; padding: 40px;">
            <div class="d-flex align-items-center">
                <MudAvatar Size="Size.Large" Alt="Seller Logo" Src="@Seller.SellerProfileImage" Class="me-3" Style="width: 180px; height: 180px;" />
                <div>
                    <MudText Typo="Typo.h4" Style="align-content=center">@Seller.SellerName</MudText>
                    <MudText Typo="Typo.h5" Style="align-content=center">Rating: @Seller.SellerRating/5</MudText>
                </div>
            </div>
        </MudPaper>

    <MudText Typo="Typo.h4" Class="mb-3" Style="align-content=center; margin-bottom=20px;">Products By @Seller.SellerName</MudText>

        <MudGrid>
            @if (Seller.Products?.Any() == true)
            {
                @foreach (var product in Seller.Products)
                {
                    <MudItem xs="12" sm="6" md="4" lg="3">
                        <MudCard Class="my-2">
                            <MudCardMedia Image="@product.MainImagePath" Alt="@product.Name" Class="mud-width-full mud-height-200" />
                            <MudCardContent>
                                <MudText Typo="Typo.h6">@product.Name</MudText>
                                <MudText Typo="Typo.body2">@($"Price: {product.Price:C}")</MudText>
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => NavigateToProductDetails(product.ProductId)">
                                    View Details
                                </MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            }
            else
            {
                <MudAlert Severity="Severity.Error" Class="mb-3" Style="margin-left=10px; margin-top=10px;">No products available</MudAlert>
            }
        </MudGrid>
    }
</MudContainer>

@code {
    [Parameter]
    public int SellerId { get; set; }
    private bool IsLoading = true;
    private bool HasError = false;

    private SellerOutput Seller;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Retrieve seller information from the service
            Seller = await SellerService.GetSellerWithProductsAsync(SellerId);
        }
        catch
        {
            HasError = true;
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void NavigateToProductDetails(int productId)
    {
        NavigationManager.NavigateTo($"/Product/{productId}");
    }
}
