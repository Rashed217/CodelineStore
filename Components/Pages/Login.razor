@page "/Login"
@inject NavigationManager Navigation
@inject ApplicationDbContext DbContext
@inject UserState UserState
@inject IUserService UserService
@inject IAuthService AuthService

@using System.ComponentModel.DataAnnotations
@using CodelineStore.Services
@using Microsoft.EntityFrameworkCore

<MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center" Style="min-height: 100vh; margin-top: 100px;">
    <MudItem xs="12" sm="6" md="4">
        <MudPaper Class="pa-6" Elevation="4" Style="border-radius: 10px; border: 2px solid #1976d2;">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-2">Login</MudText>
            <MudText Typo="Typo.body2" Align="Align.Center" Class="mb-4">Enter your credentials to continue</MudText>

            @if (showError)
            {
                <MudAlert Severity="Severity.Error" Class="mb-3">Invalid email or password</MudAlert>
            }

            <MudForm @ref="form" IsValid="@success">
                <MudTextField @bind-Value="Email" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "Invalid email address" })" Class="mb-3" />
                <MudTextField @bind-Value="Password" Label="Password" InputType="InputType.Password" Required="true"
                              RequiredError="Password is required!" Class="mb-3" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="LoginUser">
                    Login
                </MudButton>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private bool success;
    private bool showError;
    private MudForm form;
    private string Email;
    private string Password;
    private string Message;
    private string AlertClass;


    private async Task LoginUser()
    {
        Log.Information($"Received login request from Email: {Email}");

        try
        {
            var user = UserService.Login(Email, Password); // Await the login method.

            if (user == null)
            {
                Log.Error("Login failed due to wrong credentials.");
                showError = true;
                AlertClass = "alert-danger";
                return;
            }

            Log.Debug("Login credentials succeeded.");
            Message = "Login successful!";
            AlertClass = "alert-success";

            // Generate authentication token
            AuthService.GenerateToken(user);

            // Navigate based on user role
            if (user.Role == "Client")
                Navigation.NavigateTo("/Customer");
            else if (user.Role == "Seller")
                Navigation.NavigateTo("/SellerPortal");
            else
                Navigation.NavigateTo("/AdminHome");
        }
        catch (Exception ex)
        {
            Log.Error($"An error occurred during login: {ex.Message}");
            Message = "An unexpected error occurred. Please try again later.";
            AlertClass = "alert-danger";
        }
    }

    private string HashPassword(string password)
    {
        // Replace this with a secure password hashing algorithm (e.g., BCrypt, SHA256)
        return Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(password));
    }

    private bool VerifyPassword(string enteredPassword, string storedPasswordHash)
    {
        // Example: Compare hashed passwords (implement actual hashing logic)
        return HashPassword(enteredPassword) == storedPasswordHash;
    }
}
