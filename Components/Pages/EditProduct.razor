@page "/EditProduct/{id:int}"
@using CodelineStore.Data.Model
@using CodelineStore.Services
@inject IProductService ProductService
@inject ICompoundService CompoundService
@inject NavigationManager Navigation
@inject ICategoryService CategoryService
@using CodelineStore.Components.Layout
@layout SellerLayout

<h3>Edit Product</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="editProduct" OnValidSubmit="SaveProduct">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="productName">Product Name</label>
            <InputText id="productName" class="form-control" @bind-Value="editProduct.Name" />
        </div>

        <div class="mb-3">
            <label for="productPrice">Price</label>
            <InputNumber id="productPrice" class="form-control" @bind-Value="editProduct.Price" />
        </div>

        <div class="mb-3">
            <label for="productDescription">Description</label>
            <InputTextArea id="productDescription" class="form-control" @bind-Value="editProduct.Description" />
        </div>

        <div class="mb-3">
            <label for="productCategory">Category</label>
            <!-- Remove the InputSelect or disable it -->
            <!-- <InputSelect id="productCategory" class="form-control" @bind-Value="editProduct.CategoryId">
            @foreach (var category in categories)
            {
                    <option value="@category.CId">@category.CategoryName</option>
            }
            </InputSelect> -->
            <p>Categories are disabled for now.</p>
        </div>


        <div class="mb-3">
            <label for="productImage">Product Image</label>

            @if (!string.IsNullOrEmpty(editProduct.Image))
            {
                <div>
                    <img src="@editProduct.Image" alt="Current Image" style="max-height: 150px; max-width: 150px;" />
                    <p>Current image</p>
                </div>
            }

    <InputFile id="productImage" class="form-control" OnChange="HandleImageUpload" />
</div>


        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int id { get; set; }

    private Product product;
    private Product editProduct;
    private string imagePath;
    private List<Category> categories = new List<Category>();
    private bool isLoading = true; // Loading flag

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch product by ID
            Console.WriteLine($"Fetching product with ID: {id}");

            product = await ProductService.GetProductByIdAsync(id);

            if (product != null)
            {
                // Initialize the edit model with the existing product data
                editProduct = new Product
                    {
                        PId = product.PId,
                        Name = product.Name,
                        Price = product.Price,
                        Description = product.Description,
                        CategoryId = product.CategoryId,
                        Image = product.Image // Retain the image path
                    };


            }
            else
            {
                Console.Error.WriteLine($"Product with ID {id} not found.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching product: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            Console.WriteLine("Loading state set to false.");
        }
    }

    private void HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        imagePath = $"images/{file.Name}"; // Update imagePath with the new image file name
    }

    private async Task SaveProduct()
    {
        try
        {
            if (editProduct == null) return;

            // If there's a new image, set the image path; otherwise, keep the existing one.
            if (!string.IsNullOrEmpty(imagePath))
            {
                editProduct.Image = imagePath; // Use the 'Image' property instead of 'ImagePath'
            }

            // Use an update method instead of adding a new product
            await ProductService.UpdateProductAsync(editProduct);

            // Navigate back to the product list after saving
            Navigation.NavigateTo("/ProductList");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error saving product: {ex.Message}");
        }
    }



    private void Cancel()
    {
        Navigation.NavigateTo("/ProductList");
    }
}
