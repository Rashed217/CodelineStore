@page "/searchresults"
@using CodelineStore.Components.Layout
@using CodelineStore.Data
@using CodelineStore.Services
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@inject ApplicationDbContext DbContext
@layout CustomerLayout
<MudGrid Justify="Justify.FlexStart" AlignItems="AlignItems.Start" Class="mt-4">
    @if (filteredProducts.Any())
    {
        @foreach (var product in filteredProducts)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudCardMedia Image="@product.Image" Height="200" />
                    <MudCardContent>
                        <MudText Typo="Typo.h5">@product.Name</MudText>
                        <MudText Typo="Typo.body2">@product.Description</MudText>
                        <MudText Typo="Typo.body2">Price: @product.Price</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => AddToCart(product.PId))">
                            Buy Now
                        </MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    }
    else
    {
        <MudText Typo="Typo.body1" Align="Align.Center" Class="mt-4">No products found for "@searchKeyword".</MudText>
    }
</MudGrid>
@code {
    private string searchKeyword;
    private List<Product> allProducts = new(); // Loaded from the database
    private List<Product> filteredProducts = new();
    protected override async Task OnInitializedAsync()
    {
        // Parse the search keyword from the query string
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("keyword", out var keyword))
        {
            searchKeyword = keyword;
        }
        // Load products from the database
        allProducts = await LoadProductsFromDatabase();
        // Filter products based on the search keyword
        FilterProducts();
    }
    private async Task<List<Product>> LoadProductsFromDatabase()
    {
        return await DbContext.Products.ToListAsync();
    }
    private void FilterProducts()
    {
        if (!string.IsNullOrWhiteSpace(searchKeyword))
        {
            filteredProducts = allProducts
                .Where(p => p.Name.Contains(searchKeyword, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
    private void AddToCart(int productId)
    {
        NavigationManager.NavigateTo("/Checkout");
    }
}