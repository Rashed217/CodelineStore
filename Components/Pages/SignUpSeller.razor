@page "/SignUpSeller"
@inject NavigationManager Navigation
@inject ApplicationDbContext DbContext
@inject IMapper mapper
@inject IWebHostEnvironment WebHostEnvironment
@inject ISendEmail EmailService
@inject ISellerService SellerService


@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using AutoMapper
@using CodelineStore.DTOs.SellerDTOs
@using CodelineStore.DTOs.UserDTOs
@using CodelineStore.Data
@using CodelineStore.DTOs
@using CodelineStore.Data.Model
@using Microsoft.AspNetCore.Hosting
@using Microsoft.EntityFrameworkCore
@using MudBlazor


<MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center" Style="min-height: 100vh; margin-top: 50px;">
    <MudItem xs="12" sm="6" md="4">
        <MudPaper Class="pa-6" Elevation="4" Style="border-radius: 10px; border: 2px solid #1976d2;">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-3">Seller Registration</MudText>
            <MudText Typo="Typo.body2" Align="Align.Center" Class="mb-4">Register to continue</MudText>

            @if (showSuccessAlert)
            {
                <MudAlert Severity="Severity.Success" Class="mb-4">Seller registered successfully, now you can login with your account</MudAlert>
            }
            @if (showFailedAlert)
            {
                <MudAlert Severity="Severity.Error" Class="mb-4">An error occurred</MudAlert>
            }

            <MudForm @ref="form" IsValid="@success">
                <!-- Username -->
                <MudTextField @bind-Value="userInput.Username"
                              Label="Shop Name"
                              Required="true"
                              RequiredError="Name is required!"
                              Class="mb-4" />

                <!-- Email -->
                <MudTextField @bind-Value="userInput.Email"
                              Label="Email"
                              Required="true"
                              Validation="@(new EmailAddressAttribute() { ErrorMessage = "Invalid email address" })"
                              Class="mb-4" />

                <!-- Password -->
                <MudTextField @bind-Value="userInput.Password"
                              Label="Password"
                              InputType="InputType.Password"
                              Required="true"
                              RequiredError="Password is required!"
                              Class="mb-4" />

                <!-- Country Selector -->
                <MudSelect @bind-Value="userInput.Country" Label="Select a Country" Variant="Variant.Filled" Class="mb-4">
                    @foreach (var country in _country)
                    {
                        <MudSelectItem Value="@country">@country</MudSelectItem>
                    }
                </MudSelect>

                <!-- File Upload -->
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Class="mb-4">
                    <ActivatorContent>
                        <MudFab Color="Color.Primary"
                                StartIcon="@Icons.Material.Filled.Image"
                                Label="Upload picture" />
                    </ActivatorContent>
                </MudFileUpload>

                <!-- Image code -->
                @if (_files != null && _files.Count > 0)
                {
                    <MudText Typo="@Typo.h6">@_files.Count() File@(_files.Count() == 1 ? "" : "s"):</MudText>
                    <MudList T="string">
                        @foreach (var file in _files)
                        {
                            <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file.Name">
                                @file.Name <code>@file.Size bytes</code>
                            </MudListItem>
                        }
                    </MudList>
                }

                <!-- Submit Button -->
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           FullWidth="true"
                           OnClick="RegisterSeller">
                    Register
                </MudButton>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private MudForm form;
    private bool success;
    private bool showSuccessAlert = false;
    private bool showFailedAlert = false;

    private SellerInput userInput = new SellerInput();
    private IList<IBrowserFile> _files = new List<IBrowserFile>();

    private string[] _country =
    {
        "United States", "Canada", "United Kingdom", "Germany", "France",
        "Italy", "Spain", "Australia", "India", "China",
        "Japan", "Brazil", "Russia", "South Africa", "Mexico",
        "South Korea", "Turkey", "Saudi Arabia", "Argentina", "Indonesia",
        "United Arab Emirates", "Palestine", "Qatar", "Kuwait", "Oman",
        "Bahrain", "Jordan", "Lebanon", "Egypt", "Iraq"
    };

private async Task RegisterSeller()
{
    try
    {
        await form.Validate();
        if (form.IsValid)
        {
            // Ensure the profile image path is set after file upload
            if (_files.Count > 0)
            {
                userInput.ProfileImagePath = Path.Combine("images", $"{userInput.Username}.jpg");
            }

            // Create the user first
            var userEntity = new User
            {
                Username = userInput.Username,
                Email = userInput.Email,
                Password = HashPassword(userInput.Password), // Ensure to hash the password
                Country = userInput.Country,
                Role = "Seller" // Default role for client (you may change this as needed)
            };

            // Add the user to the Users table
            DbContext.Users.Add(userEntity);
            await DbContext.SaveChangesAsync(); // Save to get the UserId

            // Now that the user is saved, create the associated seller entity
            var sellerEntity = new Seller
            {
                User = userEntity,
                UserId = userEntity.UserId, // Associate the Seller with the created User
                ProfileImagePath = userInput.ProfileImagePath,
                SellerRating = 0 // Default rating for the new seller
            };

            // Add the seller to the Sellers table
            // DbContext.Sellers.Add(sellerEntity);
            // await DbContext.SaveChangesAsync(); // Save the Seller entity to get SellerId (SId)

            // Now you can safely use the Seller's ID and other data
            var sellerOutput = new SellerOutput
            {
                userId = userEntity.UserId,
                SellerId = sellerEntity.SId, // Use the SellerId from the newly created Seller
                SellerName = sellerEntity.User.Username, // Name from the associated User
                SellerProfileImage = sellerEntity.ProfileImagePath, // Profile image path from Seller
                SellerRating = sellerEntity.SellerRating // Seller's rating
            };

            // Call AddSeller method from the service
            SellerService.AddSeller(sellerOutput);

            // Show success alert and reset the form
            showSuccessAlert = true;
            showFailedAlert = false;

            var subject = "Welcome to CodelineStore - Seller Registration Confirmation";
                var body = $"Dear {userInput.Username},\n\n" +
                            "Your registration as a seller on CodelineStore has been successfully completed.\n\n" +
                            "Your account has been created, and you may now log in to manage your store.\n\n" +
                            "Best regards,\nCodelineStore Team";


            await EmailService.SendEmailAsync(userInput.Email, subject, body);

            // Reset the form
            userInput = new SellerInput();
            _files.Clear(); // Clear the uploaded files
        }
    }
    catch (Exception ex)
    {
        showSuccessAlert = false;
        showFailedAlert = true;
        Console.WriteLine($"An error occurred: {ex.Message}"); // Log the error
    }
}




    private string HashPassword(string password)
    {
        // Replace this with a real hashing algorithm like BCrypt, SHA256, or PBKDF2
        return Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(password));
    }

    private async Task UploadFiles(IBrowserFile file)
    {
        // Add the uploaded file to the _files list
        _files.Add(file);

        // Construct the save path
        var savePath = Path.Combine(WebHostEnvironment.WebRootPath, "images", $"{userInput.Username}.jpg");

        // Ensure the directory exists
        Directory.CreateDirectory(Path.GetDirectoryName(savePath));

        try
        {
            // Save the file to the server
            await using var fileStream = new FileStream(savePath, FileMode.Create);
            await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(fileStream);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error uploading file '{file.Name}': {ex.Message}");
        }
    }
}