@page "/CategoryProducts/{categoryId:int}"
@using CodelineStore.DTOs.ProductDTO
@using CodelineStore.Data.Model
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext

<MudContainer>
    <MudGrid>
        @if (products != null && products.Any())
        {
            @foreach (var product in products)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <MudCard Class="mx-auto my-2" Style="width: 100%; max-width: 350px;">
                        <div Style="height: 300px; width: 100%; overflow: hidden; display: flex; justify-content: center; align-items: center;">
                            <img src="@product.Image" alt="@product.Name" style="object-fit: cover; height: 100%; width: 100%;" />
                        </div>
                        <MudCardContent>
                            <MudText Typo="Typo.h5">@product.Name</MudText>
                            <MudText Typo="Typo.body2">Price: $@product.Price</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary">Add to Cart</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
        else
        {
            <MudText Typo="Typo.h6" Align="Align.Center" Class="mt-4">No products available in this category.</MudText>
        }
    </MudGrid>
</MudContainer>


@code {
    [Parameter] public int CategoryId { get; set; }
    private List<ProductDto> products;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    // Detect when CategoryId changes (fixes stuck products)
    protected override async Task OnParametersSetAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        Console.WriteLine($"Loading products for CategoryId: {CategoryId}");

        products = await DbContext.Products
            .Where(p => p.CategoryId == CategoryId)
            .Select(p => new ProductDto
                {
                    ProductId = p.PId,
                    Name = p.Name,
                    Price = p.Price,
                    Image = string.IsNullOrEmpty(p.Image) ? "images/default-product.png" : p.Image
                })
            .ToListAsync();
    }
}
