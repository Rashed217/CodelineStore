@page "/AdminUserProfile/{UserId:int}"
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@using CodelineStore.Components.Layout
@using CodelineStore.Data.Model
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@layout AdminLayout
<MudContainer Class="mt-4">
    @if (UserDetails == null)
    {
        <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Error">
            User not found.
        </MudText>
    }
    else
    {
        <MudCard Class="mx-auto" Style="max-width: 600px;">
            <MudCardContent>
                <MudText Typo="Typo.h5" Class="mb-2">User Details</MudText>
                <MudDivider Class="my-2" />
                <MudText Typo="Typo.body1"><b>User ID:</b> @UserDetails.UserId</MudText>
                <MudText Typo="Typo.body1"><b>Username:</b> @UserDetails.Username</MudText>
                <MudText Typo="Typo.body1"><b>Email:</b> @UserDetails.Email</MudText>
                <MudText Typo="Typo.body1"><b>Role:</b> @UserDetails.Role</MudText>
            </MudCardContent>
            <MudCardActions Class="d-flex justify-content-end">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@EditUser" Class="mr-2">
                    Edit User
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ShowDeleteConfirmation">
                    Delete User
                </MudButton>
            </MudCardActions>
        </MudCard>
    }
</MudContainer>

@code {
    [Parameter] public int UserId { get; set; }
    private User UserDetails { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserDetails = await DbContext.Users.FirstOrDefaultAsync(u => u.UserId == UserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user details: {ex.Message}");
        }
    }

    private void EditUser()
    {
        // Navigate to the Edit User page
        Navigation.NavigateTo($"/EditUser/{UserId}");
    }

    private async Task ShowDeleteConfirmation()
    {
        try
        {
            // Show a native browser confirmation dialog
            bool confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm",
                $"Are you sure you want to delete the user '{UserDetails?.Username}'?");

            if (confirmDelete)
            {
                await DeleteUser();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error during delete confirmation: {e.Message}");
        }
    }

    private async Task DeleteUser()
    {
        try
        {
            var user = await DbContext.Users.FindAsync(UserId);
            if (user != null)
            {
                DbContext.Users.Remove(user);
                await DbContext.SaveChangesAsync();
                Console.WriteLine($"User with ID {UserId} deleted successfully.");
                Navigation.NavigateTo("/ViewUsers"); // Redirect to View Users page
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting user: {ex.Message}");
        }
    }
}
